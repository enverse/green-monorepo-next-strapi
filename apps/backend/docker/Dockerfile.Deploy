# ─────── Stage 1: Build ───────
FROM node:20-alpine AS build

# 1. PNPM + PATH
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable

RUN apk update && apk add --no-cache \
    build-base \
    gcc \
    python3 \
    autoconf \
    automake \
    zlib-dev \
    libpng-dev \
    vips-dev \
    git

ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

WORKDIR /opt/

COPY package.json pnpm-lock.yaml ./
RUN pnpm install --frozen-lockfile



# 6. Asegurar binarios en PATH
ENV PATH /opt/node_modules/.bin:$PATH

WORKDIR /opt/app
COPY . .

RUN pnpm strapi ts:generate-types

RUN pnpm build


# ─────── Stage 2: Runtime ───────
FROM node:20-alpine AS runtime

# 1. PNPM + PATH
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH:/opt/node_modules/.bin"

RUN corepack enable

RUN apk add --no-cache vips-dev

ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

WORKDIR /opt/app

COPY --from=build /opt/node_modules ./node_modules
COPY --from=build /opt/app ./

RUN mkdir -p node_modules/.strapi .cache .tmp \
    && chown -R node:node node_modules .cache .tmp \
    && chown -R node:node /opt/app

USER node

EXPOSE 1338

CMD ["pnpm", "start"]